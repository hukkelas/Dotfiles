#!/usr/bin/env python3
import os
import argparse
import skimage
import numpy as np


def check(vector, has_alpha, alpha):
    max_val = 255 if vector.dtype == np.uint8 else 1.0
    if vector.mean() == max_val or np.all(vector == 240):
        return True
    if has_alpha:
        if  alpha.sum() == 0:
            return True
    return False

def remove_borders(im):
    # Left border
    has_alpha = im.shape[2] == 4
    for col_left in range(im.shape[1]):
        column = im[:, col_left, :3]
        alpha = im[:, col_left, -1]
        if not check(column, has_alpha, alpha):
            break
    for col_right in range(im.shape[1]-1, -1, -1):
        column = im[:, col_right, :3]
        alpha = im[:, col_right, -1]
        if not check(column, has_alpha, alpha):
            break
    
    for row_top in range(im.shape[0]):
        column = im[row_top, :, :3]
        alpha = im[row_top, :, -1]
        if not check(column, has_alpha, alpha):
            break
    for row_bottom in range(im.shape[0]-1, -1, -1):
        column = im[row_bottom, :, :3]
        alpha = im[row_bottom, : -1]
        if not check(column, has_alpha, alpha):
            break
    
    im = im[row_top:row_bottom, col_left:col_right]
    return im


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("filepath")
    parser.add_argument("--pad", type=int)
    
    args = parser.parse_args()
    filepath = args.filepath
    pad = args.pad

    im = skimage.io.imread(filepath)
    
    im = remove_borders(im)
    if pad is not None and pad > 0:
        im = np.pad(im, [[pad, pad], [pad, pad], [0, 0]], mode="constant")

#    skimage.io.imshow(im)
 #   skimage.io.show()
    skimage.io.imsave(filepath, im)
